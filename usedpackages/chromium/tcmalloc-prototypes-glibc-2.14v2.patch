--- third_party/tcmalloc/chromium/src/tcmalloc.cc.orig	2011-06-21 10:28:26.000000000 +0200
+++ third_party/tcmalloc/chromium/src/tcmalloc.cc	2011-06-21 15:15:04.639274358 +0200
@@ -403,7 +403,7 @@
   return tc_malloc(size);
 }
 
-void* (*__malloc_hook)(
+void* (* volatile __malloc_hook)(
     size_t size, const void* caller) = tc_ptmalloc_malloc_hook;
 
 static void* tc_ptmalloc_realloc_hook(
@@ -411,14 +411,14 @@
   return tc_realloc(ptr, size);
 }
 
-void* (*__realloc_hook)(
+void* (* volatile __realloc_hook)(
     void* ptr, size_t size, const void* caller) = tc_ptmalloc_realloc_hook;
 
 static void tc_ptmalloc_free_hook(void* ptr, const void* caller) {
   tc_free(ptr);
 }
 
-void (*__free_hook)(void* ptr, const void* caller) = tc_ptmalloc_free_hook;
+void (* volatile __free_hook)(void* ptr, const void* caller) = tc_ptmalloc_free_hook;
 
 #endif
 
@@ -1757,7 +1757,7 @@
   MallocHook::InvokeNewHook(result, size);
   return result;
 }
-void *(*__memalign_hook)(size_t, size_t, const void *) = MemalignOverride;
+void *(* volatile __memalign_hook)(size_t, size_t, const void *) = MemalignOverride;
 #endif  // TCMALLOC_USING_DEBUGALLOCATION
 
 // ---Double free() debugging implementation -----------------------------------
